#include "simulator.hpp"
#include <iostream>
#include <string>
#include <iomanip>

int main() {
    std::string input = R"(
# ------------ TEXT SEGMENT ------------ #
0x00000000 0x002082b3 , add x5,x1,x2 # 0110011-000-0000000-00101-00001-00010-NULL
0x00000004 0x0041f333 , and x6,x3,x4 # 0110011-111-0000000-00110-00011-00100-NULL
0x00000008 0x0062e3b3 , or x7,x5,x6 # 0110011-110-0000000-00111-00101-00110-NULL
0x0000000c 0x00239433 , sll x8,x7,x2 # 0110011-001-0000000-01000-00111-00010-NULL
0x00000010 0x0041a4b3 , slt x9,x3,x4 # 0110011-010-0000000-01001-00011-00100-NULL
0x00000014 0x40145533 , sra x10,x8,x1 # 0110011-101-0100000-01010-01000-00001-NULL
0x00000018 0x0024d5b3 , srl x11,x9,x2 # 0110011-101-0000000-01011-01001-00010-NULL
0x0000001c 0x40730633 , sub x12,x6,x7 # 0110011-000-0100000-01100-00110-00111-NULL
0x00000020 0x009446b3 , xor x13,x8,x9 # 0110011-100-0000000-01101-01000-01001-NULL
0x00000024 0x02628733 , mul x14,x5,x6 # 0110011-000-0000001-01110-00101-00110-NULL
0x00000028 0x0283c7b3 , div x15,x7,x8 # 0110011-100-0000001-01111-00111-01000-NULL
0x0000002c 0x02a4e833 , rem x16,x9,x10 # 0110011-110-0000001-10000-01001-01010-NULL
0x00000030 0x00a28893 , addi x17,x5,10 # 0010011-000-0000000-10001-00101-01010-000000001010
0x00000034 0x00f37913 , andi x18,x6,15 # 0010011-111-0000000-10010-00110-01111-000000001111
0x00000038 0x0143e993 , ori x19,x7,20 # 0010011-110-0000000-10011-00111-10100-000000010100
0x0000003c 0x00008a03 , lb x20,0(x1) # 0000011-000-0000000-10100-00001-00000-000000000000
0x00000040 0x00813a83 , ld x21,8(x2) # 0000011-011-0000000-10101-00010-01000-000000001000
0x00000044 0x00419b03 , lh x22,4(x3) # 0000011-001-0000000-10110-00011-00100-000000000100
0x00000048 0x00c22b83 , lw x23,12(x4) # 0000011-010-0000000-10111-00100-01100-000000001100
0x0000004c 0x00028c67 , jalr x24,x5,0 # 1100111-000-0000000-11000-00101-00000-NULL
0x00000050 0x01108023 , sb x17,0(x1) # 0100011-000-0000000-00000-00001-10001-000000000000
0x00000054 0x01212223 , sw x18,4(x2) # 0100011-010-0000000-00100-00010-10010-000000000100
0x00000058 0x0131b423 , sd x19,8(x3) # 0100011-011-0000000-01000-00011-10011-000000001000
0x0000005c 0x01421623 , sh x20,12(x4) # 0100011-001-0000000-01100-00100-10100-000000001100
0x00000060 0x00628e63 , beq x5,x6,28 # 1100011-000-0000000-11100-00101-00110-0000000011100
0x00000064 0x00839c63 , bne x7,x8,24 # 1100011-001-0000000-11000-00111-01000-0000000011000
0x00000068 0x00a4da63 , bge x9,x10,20 # 1100011-101-0000000-10100-01001-01010-0000000010100
0x0000006c 0x00c5c863 , blt x11,x12,16 # 1100011-100-0000000-10000-01011-01100-0000000010000
0x00000070 0x10000c97 , auipc x25,65536 # 0010111-000-0001000-11001-00000-00000-00010000000000000000
0x00000074 0x20000d37 , lui x26,131072 # 0110111-000-0010000-11010-00000-00000-00100000000000000000
0x00000078 0x004000ef , jal x1,4 # 1101111-000-0000000-00001-00000-00100-000000000000000000100
0x0000007c 0xdeadbeef , [TEXT_SEGMENT_END]

# ------------ DATA SEGMENT ------------ #
0x10000000 0x00000012
0x10000001 0x00000034
0x10000002 0x00000012
0x10000003 0x00000078
0x10000004 0x00000056
0x10000005 0x00000034
0x10000006 0x00000012
0x10000007 0x00000048
0x10000008 0x00000065
0x10000009 0x0000006c
0x1000000a 0x0000006c
0x1000000b 0x0000006f
0x1000000c 0x0000002c
0x1000000d 0x00000020
0x1000000e 0x00000052
0x1000000f 0x00000049
0x10000010 0x00000053
0x10000011 0x00000043
0x10000012 0x0000002d
0x10000013 0x00000056
0x10000014 0x00000021
0x10000015 0x00000000
0x10000017 0x0000000a
0x10000018 0x00000000
0x10000019 0x00000000
0x1000001a 0x00000000
0x1000001b 0x000000ec
0x1000001c 0x000000ff
0x1000001d 0x000000ff
0x1000001e 0x000000ff
0x1000001f 0x0000001e
0x10000020 0x00000000
0x10000021 0x00000000
0x10000022 0x00000000
0x10000023 0x00000028
0x10000024 0x00000000
0x10000025 0x00000000
0x10000026 0x00000000
0x10000027 0x00000005
0x10000028 0x00000000
0x10000029 0x00000000
0x1000002a 0x00000000
)";

    Simulator simulator;
    if (!simulator.loadProgram(input)) {
        std::cerr << "Failed to load program\n";
        return 1;
    }
    std::cout << "Program Text Segment:\n";
    auto textMap = simulator.getTextMap();
    for(const auto& [addr, instPair] : textMap) {
        std::cout << "0x" << std::hex << std::setw(8) << std::setfill('0') << addr << " : " << instPair.second << std::endl;
    }

    std::cout << "\nPress Enter to step through execution...\n";
    while(simulator.step()) {
        auto logs = simulator.getConsoleOutput();
        for(const auto& [key, value] : logs) {
            std::cout << key << ": " << value << std::endl;
        }
        std::cout << "PC: 0x" << std::hex << std::setw(8) << std::setfill('0') << simulator.getPC() << std::endl;
        std::cin.get();
    }
    std::cout << "\nSimulation Complete\n";
    std::cout << "Total Clock Cycles: " << std::dec << simulator.getCycles() << std::endl;
    
    std::cout << "Final Register State:\n";
    const uint32_t* regs = simulator.getRegisters();
    for(int i = 0; i < 32; i++) {
        std::cout << "x" << std::dec << i << ": 0x" << std::hex << std::setw(8) << std::setfill('0') << regs[i] << std::endl;
    }

    return 0;
}